// <auto-generated />
using System;
using FAI.Persistence.Repositories.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FAI.Persistence.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20251022135412_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FAI.Core.Entities.Movies.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Science Fiction"
                        });
                });

            modelBuilder.Entity("FAI.Core.Entities.Movies.MediumType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Code");

                    b.ToTable("MediumTypes");

                    b.HasData(
                        new
                        {
                            Code = "DVD",
                            Name = "Digital Versatile Disc"
                        },
                        new
                        {
                            Code = "BD",
                            Name = "Blu-Ray Disc"
                        },
                        new
                        {
                            Code = "4K",
                            Name = "4K Ultra HD Blu Ray"
                        },
                        new
                        {
                            Code = "DIGI",
                            Name = "Digital Copy"
                        },
                        new
                        {
                            Code = "VHS",
                            Name = "Video Home System"
                        },
                        new
                        {
                            Code = "STR",
                            Name = "Streaming"
                        });
                });

            modelBuilder.Entity("FAI.Core.Entities.Movies.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("MediumTypeCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("decimal(19,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("IX_Movie_GenreId");

                    b.HasIndex("MediumTypeCode")
                        .HasDatabaseName("IX_Movie_MediumTypeCode");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Movie_Title");

                    b.ToTable("Movie", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32c4be85-e8b5-4d9e-a7c8-2ac1c57e3d31"),
                            GenreId = 3,
                            MediumTypeCode = "DVD",
                            Price = 19.90m,
                            ReleaseDate = new DateTime(2001, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception"
                        },
                        new
                        {
                            Id = new Guid("f5a8fc25-0b6e-405f-983e-a7a9da20f045"),
                            GenreId = 4,
                            MediumTypeCode = "VHS",
                            Price = 12.45m,
                            ReleaseDate = new DateTime(1998, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Shining"
                        },
                        new
                        {
                            Id = new Guid("ce19a45d-5016-49bc-8ef0-572b6f4447af"),
                            GenreId = 2,
                            MediumTypeCode = "STR",
                            Price = 24.90m,
                            ReleaseDate = new DateTime(2022, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hangover"
                        },
                        new
                        {
                            Id = new Guid("d3fdd970-8909-40f3-afe2-4c10439b810f"),
                            GenreId = 1,
                            MediumTypeCode = "BD",
                            Price = 21.33m,
                            ReleaseDate = new DateTime(2018, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Get Out"
                        },
                        new
                        {
                            Id = new Guid("16ecd956-b1e5-466e-9a02-4521390ae1f4"),
                            GenreId = 5,
                            MediumTypeCode = "VHS",
                            Price = 18.79m,
                            ReleaseDate = new DateTime(1984, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Zurück in die Zukunft"
                        });
                });

            modelBuilder.Entity("FAI.Core.Entities.Movies.Movie", b =>
                {
                    b.HasOne("FAI.Core.Entities.Movies.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FAI.Core.Entities.Movies.MediumType", "MediumType")
                        .WithMany("Movies")
                        .HasForeignKey("MediumTypeCode")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Genre");

                    b.Navigation("MediumType");
                });

            modelBuilder.Entity("FAI.Core.Entities.Movies.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("FAI.Core.Entities.Movies.MediumType", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
